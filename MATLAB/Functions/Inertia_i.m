function I_i  = Inertia_i( rho_body, rho_prop, sat_dim, sat_boundaries, ...
    com, thrusters, i_index, j_index, k_index)

global simConfig

I_i_body = rho_body*(sat_dim(i_index)/3) * ( ...
        sat_dim(k_index) * ( ...
            (sat_boundaries(j_index,2) - com(j_index))^3 ...
            - (sat_boundaries(j_index,1) - com(j_index))^3 ...
        ) ...
        + sat_dim(j_index) * ( ...
            (sat_boundaries(k_index,2) - com(k_index))^3 ...
            - (sat_boundaries(k_index,1) - com(k_index))^3 ...
        ) ...
    );

I_i_prop = 0;

if simConfig.enablePropulsionInertia
    for thrusterIter = 1:length(thrusters)

        thisI = ( ...
            (rho_prop(thrusterIter)/3) * ( ...
            thrusters(thrusterIter).structureDim(i_index,2) ...
            - thrusters(thrusterIter).structureDim(i_index,1) ...
            ) ) * ( ...
                ( ...
                thrusters(thrusterIter).structureDim(j_index,2) ...
                - thrusters(thrusterIter).structureDim(j_index,1) ...
                ) * ( ...
                    (sat_boundaries(k_index,2) - com(k_index))^3 ...
                    - (sat_boundaries(k_index,1) - com(k_index))^3 ...
                ) ...
                + ...
                ( ...
                thrusters(thrusterIter).structureDim(k_index,2) ...
                - thrusters(thrusterIter).structureDim(k_index,1) ...
                ) * ( ...
                    (sat_boundaries(j_index,2) - com(j_index))^3 ...
                    - (sat_boundaries(j_index,1) - com(j_index))^3 ...
                )...
            );

        I_i_prop = I_i_prop + thisI;

    end
end

I_i = I_i_body + I_i_prop;

end

