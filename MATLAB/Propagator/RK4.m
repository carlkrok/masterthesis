function [ t, Y ] = RK4( Y0, stepTimes, missionData, satData, rwData, simConfig )

unitQuatTol = 1e-6;

t = stepTimes'; 

Y = zeros(length(stepTimes),length(Y0));
Y(1,:) = Y0';

prevTimeStep = stepTimes(1);

for stepTimeIter = 2:length(stepTimes)
    
    thisTimeStep = stepTimes(stepTimeIter);
    
    thisTimeStepLength = thisTimeStep - prevTimeStep;
    
    k1_raw = SatelliteAcceleration(prevTimeStep, ...
        Y(stepTimeIter-1,:)', ...
        missionData.mjd0, ...
        missionData.mu, ...
        missionData.Re, ...
        missionData.J2, ...
        simConfig.enableJ2, ...
        simConfig.enableDrag, ...
        simConfig.enableSRP, ...
        simConfig.enablePointing, ...
        missionData.pointingTarget_ECEF, ...
        satData.mass, ...
        satData.I_mat, ...
        simConfig.enableRW, ...
        rwData.A_mat, ...
        rwData.A_MPinv_mat, ...
        rwData.I_mat, ...
        rwData.maxTorque, ...
        rwData.maxMomentum, ...
        satData.surfaceCenterVectorsAndAreas, ...
        satData.coeffR, ...
        satData.coeffDrag);
    
    k1 = zeros(size(k1_raw));
    k1(1:6) = thisTimeStepLength * k1_raw(1:6);
    k1(7:10) = RotRateToQuaternion(thisTimeStepLength*k1_raw(11:13));
    
    if abs(norm(k1(7:10)) - 1) > unitQuatTol
        error(sprintf('Non-unit quaternion found at k1 of step %i of RK4, length: %d \n',stepTimeIter,norm(k1(7:10) )))
    end
    
    k1(11:17) = thisTimeStepLength * k1_raw(11:17);
    
    Yk2 = Y(stepTimeIter-1,:)';
    Yk2(1:6) = Yk2(1:6) + 0.5*k1(1:6);
    Yk2(7:10) = QuaternionSummation(Yk2(7:10), quatpower(k1(7:10)',0.5)');
                %Yk2(7:10) + 0.5*k1(7:10);
    Yk2(11:17) = Yk2(11:17) + 0.5*k1(11:17);
    
    if abs(norm(Yk2(7:10)) - 1) > unitQuatTol
        error(sprintf('Non-unit quaternion found at Yk2 of step %i of RK4, length: %d \n',stepTimeIter,norm(Yk2(7:10)) ))
    end
    
    k2_raw = SatelliteAcceleration(prevTimeStep + ...
        0.5*thisTimeStepLength, ...
        Yk2, ...
        missionData.mjd0, ...
        missionData.mu, ...
        missionData.Re, ...
        missionData.J2, ...
        simConfig.enableJ2, ...
        simConfig.enableDrag, ...
        simConfig.enableSRP, ...
        simConfig.enablePointing, ...
        missionData.pointingTarget_ECEF, ...
        satData.mass, ...
        satData.I_mat, ...
        simConfig.enableRW, ...
        rwData.A_mat, ...
        rwData.A_MPinv_mat, ...
        rwData.I_mat, ...
        rwData.maxTorque, ...
        rwData.maxMomentum, ...
        satData.surfaceCenterVectorsAndAreas, ...
        satData.coeffR, ...
        satData.coeffDrag);
    
    k2 = zeros(size(k2_raw));
    k2(1:6) = thisTimeStepLength * k2_raw(1:6);
    k2(7:10) = RotRateToQuaternion(thisTimeStepLength*k2_raw(11:13));
    k2(11:17) = thisTimeStepLength * k2_raw(11:17);
    
    Yk3 = Y(stepTimeIter-1,:)';
    Yk3(1:6) = Yk3(1:6) + 0.5*k2(1:6);
    Yk3(7:10) = QuaternionSummation(Yk3(7:10), quatpower(k2(7:10)',0.5)');
    Yk3(11:17) = Yk3(11:17) + 0.5*k2(11:17);
    
    k3_raw = SatelliteAcceleration(prevTimeStep + ...
        0.5*thisTimeStepLength, ...
        Yk3, ...
        missionData.mjd0, ...
        missionData.mu, ...
        missionData.Re, ...
        missionData.J2, ...
        simConfig.enableJ2, ...
        simConfig.enableDrag, ...
        simConfig.enableSRP, ...
        simConfig.enablePointing, ...
        missionData.pointingTarget_ECEF, ...
        satData.mass, ...
        satData.I_mat, ...
        simConfig.enableRW, ...
        rwData.A_mat, ...
        rwData.A_MPinv_mat, ...
        rwData.I_mat, ...
        rwData.maxTorque, ...
        rwData.maxMomentum, ...
        satData.surfaceCenterVectorsAndAreas, ...
        satData.coeffR, ...
        satData.coeffDrag);
    
    k3 = zeros(size(k3_raw));
    k3(1:6) = thisTimeStepLength * k3_raw(1:6);
    k3(7:10) = RotRateToQuaternion(thisTimeStepLength*k3_raw(11:13));
    k3(11:17) = thisTimeStepLength * k3_raw(11:17);
    
    Yk4 = Y(stepTimeIter-1,:)';
    Yk4(1:6) = Yk4(1:6) + k3(1:6);
    Yk4(7:10) = QuaternionSummation(Yk4(7:10), k3(7:10));
    Yk4(11:17) = Yk4(11:17) + k3(11:17);
    
    k4_raw = SatelliteAcceleration(thisTimeStep, ...
        Yk4, ...
        missionData.mjd0, ...
        missionData.mu, ...
        missionData.Re, ...
        missionData.J2, ...
        simConfig.enableJ2, ...
        simConfig.enableDrag, ...
        simConfig.enableSRP, ...
        simConfig.enablePointing, ...
        missionData.pointingTarget_ECEF, ...
        satData.mass, ...
        satData.I_mat, ...
        simConfig.enableRW, ...
        rwData.A_mat, ...
        rwData.A_MPinv_mat, ...
        rwData.I_mat, ...
        rwData.maxTorque, ...
        rwData.maxMomentum, ...
        satData.surfaceCenterVectorsAndAreas, ...
        satData.coeffR, ...
        satData.coeffDrag);
    
    k4 = zeros(size(k4_raw));
    k4(1:6) = thisTimeStepLength * k4_raw(1:6);
    k4(7:10) = RotRateToQuaternion(thisTimeStepLength*k4_raw(11:13));
    k4(11:17) = thisTimeStepLength * k4_raw(11:17);
    
    Yfinal = Y(stepTimeIter-1,:)';
    Yfinal(1:6) = Yfinal(1:6) + (1/6)*(k1(1:6) + 2*k2(1:6) + 2*k3(1:6) + k4(1:6));
    Yfinal(7:10) = QuaternionSummation(Yfinal(7:10), quatpower(k1(7:10)',1/6)');
    Yfinal(7:10) = QuaternionSummation(Yfinal(7:10), quatpower(k2(7:10)',1/3)');
    Yfinal(7:10) = QuaternionSummation(Yfinal(7:10), quatpower(k3(7:10)',1/3)');
    Yfinal(7:10) = QuaternionSummation(Yfinal(7:10), quatpower(k4(7:10)',1/6)');
    Yfinal(11:17) = Yfinal(11:17) + (1/6)*(k1(11:17) + 2*k2(11:17) + 2*k3(11:17) + k4(11:17));

    Y(stepTimeIter,:) =  Yfinal';
    
    %printRK4Steps( k1, Yk2, k2, Yk3, k3, Yk4, k4, Yfinal )
    
    %plotRK4Steps( prevTimeStep, thisTimeStepLength, stepTimeIter, ...
    %    Y, k1, k2, k3, k4, Yfinal )
    
%     if abs(norm(Y(stepTimeIter,7:10)) - 1) > unitQuatTol
%         fprintf('Non-unit quaternion found in step %i of RK4, length %d - will be normalized.\n',stepTimeIter,Y(stepTimeIter,7:10) )
%         Y(stepTimeIter,7:10) = quatnormalize( Y(stepTimeIter,7:10) );
%     end

    if abs(norm(Y(stepTimeIter,7:10)) - 1) > unitQuatTol
        error('Non-unit quaternion found at end of step %i of RK4, length: %d \n',stepTimeIter,norm(Y(stepTimeIter,7:10) ))
    end
    
    prevTimeStep = thisTimeStep;
    
end

end

