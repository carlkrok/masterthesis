function [ eph ] = Ephemeris( Y0, stepTimes, missionData, satData, ...
    rwData, mtqData, propulsionData, simConfig )

opts = odeset('RelTol',1e-5,'AbsTol',1e-6,'OutputFcn',@odeprog,'Events',@odeabort);
[t, Y] = ode45( @(t, Y) SatelliteAcceleration(t, Y, ...
        missionData.mjd0, ...
        missionData.mu, ...
        missionData.Re, ...
        missionData.J2, ...
        simConfig.enableJ2, ...
        simConfig.enableDrag, ...
        simConfig.enableSRP, ...
        simConfig.enableGravityGradient, ...
        simConfig.enablePointing, ...
        simConfig.pointingTarget_ECEF, ...
        satData.mass, ...
        satData.I_mat, ...
        simConfig.enableRW, ...
        rwData.A_mat, ...
        rwData.A_MPinv_mat, ...
        rwData.I_mat, ...
        rwData.maxTorque, ...
        rwData.maxMomentum, ...
        simConfig.rw_controller.Kp, ...
        simConfig.rw_controller.Kd, ...
        simConfig.enableMTQ, ...
        mtqData.maxDipoleMoment, ...
        simConfig.mtq_controller.Kp, ...
        simConfig.mtq_controller.Kd, ...
        satData.surfaceCenterVectorsAndAreas, ...
        satData.coeffR, ...
        satData.coeffDrag), stepTimes, Y0, opts );

% [t, Y] = RK4( Y0, stepTimes, missionData, satData, rwData, simConfig );

unitQuatTol = 1e-6;
for stepIter = 1:length(Y(:,1))
    thisNorm = norm(Y(stepIter,7:10));
    if abs(thisNorm - 1) > unitQuatTol
        %fprintf('Non-unit quaternion found in step %i of ephemeris, length %d - will be normalized.\n',stepIter,thisNorm )
        Y(stepIter,7:10) = quatnormalize( Y(stepIter,7:10) );
    end
end

eph = [ t, Y ];

end

