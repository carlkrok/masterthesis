function I_ij  = Inertia_ij( rho_body, rho_prop, sat_boundaries, ...
    com, thrusters, i_index, j_index, k_index)


I_i_body = (rho_body/4) * ( ...
        (sat_boundaries(i_index,2)^2 - sat_boundaries(i_index,1)^2 ...
            + 2 * ( sat_boundaries(i_index,1) - ...
                sat_boundaries(i_index,2) ) * com(i_index) ) ...
        * (sat_boundaries(j_index,2)^2 - sat_boundaries(j_index,1)^2 ...
            + 2 * ( sat_boundaries(j_index,1) - ...
                sat_boundaries(j_index,2) ) * com(j_index) ) ...
        * ( sat_boundaries(k_index,2) - sat_boundaries(k_index,1) ) ...
        ); 

I_i_prop = 0;

for thrusterIter = 1:length(thrusters)

    thisI = (rho_prop(thrusterIter)/4) * ( ...
        (thrusters(thrusterIter).structureDim(i_index,2)^2 ...
        - thrusters(thrusterIter).structureDim(i_index,1)^2 ...
            + 2 * ( thrusters(thrusterIter).structureDim(i_index,1) - ...
                thrusters(thrusterIter).structureDim(i_index,2) ) * com(i_index) ) ...
        * (thrusters(thrusterIter).structureDim(j_index,2)^2 ...
        - thrusters(thrusterIter).structureDim(j_index,1)^2 ...
            + 2 * ( thrusters(thrusterIter).structureDim(j_index,1) - ...
                thrusters(thrusterIter).structureDim(j_index,2) ) * com(j_index) ) ...
        * ( thrusters(thrusterIter).structureDim(k_index,2) ...
        - thrusters(thrusterIter).structureDim(k_index,1) ) ...
        ); 
    
    I_i_prop = I_i_prop + thisI;

end

I_ij = I_i_body + I_i_prop;

end

